#!/bin/sh

## START: GLOBAL VARIABLES (DO NOT TOUCH)
# Set initial verbosity level (Errors and above)
SCRIPT_VERBOSITY=4
DO_DRY_RUN=0
# Detected PHP versions
declare -a PHP_VERSIONS_AVAILABLE
declare -a LOG_LEVELS
LOG_LEVELS=([0]="emerg" [1]="alert" [2]="crit" [3]="err" [4]="warning" [5]="notice" [6]="info" [7]="debug")
LAUNCHAGENTS_DIR="/Users/$(id -u -n)/Library/LaunchAgents"
## END: GLOBAL VARIABLES (DO NOT TOUCH)

## START: Utility functions (DO NOT TOUCH)
# Log utility function
function logMsg() {
  local LEVEL=${1}
  shift
  if [ ${SCRIPT_VERBOSITY} -ge ${LEVEL} ]; then
    if [ -t 0 ]; then
      # seems we are in an interactive shell
      echo "[${LOG_LEVELS[$LEVEL]}]" "$@" >&2
    else
      # seems we are in a cron job
      logger -p "${LOG_LEVELS[$LEVEL]}" -t "$0[$$]" -- "$*"
    fi
  fi
}

# Populate global array with PHP versions if not already populated
function populatePhpVersions() {
    if [ ${#PHP_VERSIONS_AVAILABLE[@]} -eq 0 ]; then
        logMsg 6 "Detecting system PHP versions"
        PHP_VERSIONS_AVAILABLE=($(brew ls --versions | grep -oE "(?:php)(?:@\d+.\d+)?(?:\s+)([0-9]+(.[0-9]+(?:[0-9]+)?)?)" | grep -oE "[0-9]+(.[0-9]+)?$" | sort -r))
    else
        logMsg 7 "PHP versions already loaded, using current data"
    fi
}

# Command usage text
function showUsage() {
    populatePhpVersions
    csvPhpList=
    if [ ${#PHP_VERSIONS_AVAILABLE[@]} -gt 0 ]; then
        csvPhpList=$(IFS=, ; echo "${PHP_VERSIONS_AVAILABLE[*]}")
    fi

    echo "Usage: $(basename $0) [OPTIONS] <phpversion>"
    echo
    echo "Available options:"
    echo "  -h  This message"
    echo "  -t  Trial run (make no changes - display commands)"
    echo "  -v  Increase verbosity level can be repeated to increase further"
    echo
    if [ ! -z "$csvPhpList" ];then
        echo "Detected PHP versions:"
        echo "  $csvPhpList"
    else
        echo "WARNING: No versions of PHP detected as installed"
    fi
}

function phpMajMinVersionParse() {
    local RE='[^0-9]*\([0-9]*\)[.]\([0-9]*\)'
    #MAJOR
    eval $2=`echo $1 | sed -e "s#$RE#\1#"`
    #MINOR
    eval $3=`echo $1 | sed -e "s#$RE#\2#"`
}
## END: Utility functions (DO NOT TOUCH)

## START: Parse run options (DO NOT TOUCH)
while getopts "tvh" OPTION; do
  case "$OPTION" in
    t)
      DO_DRY_RUN=1
      ;;
    v)
      #each -v should increase verbosity level
      SCRIPT_VERBOSITY=$(($SCRIPT_VERBOSITY+1))
      if [ $SCRIPT_VERBOSITY -gt 7 ]; then
        SCRIPT_VERBOSITY=7
      fi
      ;;
    h)
      showUsage
      exit 0
      ;;
    *)
      echo "Unrecognised option provided" 1>&2
      echo
      showUsage
      exit 2
      ;;
    esac
done
shift $((OPTIND-1))
## END: Parse run options (DO NOT TOUCH)

echo "Starting process, please wait..."

populatePhpVersions

if [ ${#PHP_VERSIONS_AVAILABLE[@]} -eq 0 ]; then
    echo "No versions of PHP installed via brew can be found, this script can not be used." 1>&2
    exit 1
fi

# Check if command was ran as root.
if [ $(id -u) -eq 0 ]; then
    echo "The command $(basename $0) should *not be executed as root* or using sudo." 1>&2
    echo "When a service requires root access, you will be prompted for a password as needed." 1>&2
    exit 1
fi

logMsg 7 "Checking version target is present and available"
# If a target version isn't provided - print usage
if [ $# -ne 1 ]; then
    echo "No PHP Version provided!" 1>&2
    echo
    showUsage
    exit 2
fi

# Store target version
TARGET_PHP_VERSION="$1"

# Check target exists
TARGET_FOUND=0
for version_requested in "${PHP_VERSIONS_AVAILABLE[@]}"; do
    [[ $TARGET_PHP_VERSION = "$version_requested" ]] && TARGET_FOUND=1
done
if [ $TARGET_FOUND -eq 0 ];then
    echo "Target PHP Version not found!" 1>&2
    echo
    showUsage
    exit 2
fi

phpMajMinVersionParse $TARGET_PHP_VERSION TARGET_PHP_MAJOR TARGET_PHP_MINOR

logMsg 6 "Requested version: $TARGET_PHP_VERSION"
if [ ! -z "$TARGET_PHP_MAJOR" ] && [ ! -z "$TARGET_PHP_MINOR" ]; then
    logMsg 7 "                   - Major: $TARGET_PHP_MAJOR"
    logMsg 7 "                   - Minor: $TARGET_PHP_MINOR"
else
    echo "Target PHP Version syntax not recognised!" 1>&2
    echo
    showUsage
    exit 2
fi

PHP_LATEST_STANDARD_VERSION=$(brew info php | grep -o -E "php(@\d+.\d+)?:\s+(\w+\s+)?\d+(.\d+)?" | grep -oE "[0-9]+(.[0-9]+)?$")
phpMajMinVersionParse $PHP_LATEST_STANDARD_VERSION PHP_LATEST_STANDARD_VERSION_MAJOR PHP_LATEST_STANDARD_VERSION_MINOR
logMsg 6 "Latest Standard PHP Version: $PHP_LATEST_STANDARD_VERSION"
if [ ! -z "$PHP_LATEST_STANDARD_VERSION_MAJOR" ] && [ ! -z "$PHP_LATEST_STANDARD_VERSION_MINOR" ]; then
    logMsg 7 "                             - Major: $PHP_LATEST_STANDARD_VERSION_MAJOR"
    logMsg 7 "                             - Minor: $PHP_LATEST_STANDARD_VERSION_MINOR"
else
    echo "Latest standard PHP Version syntax not recognised!" 1>&2
    echo
    showUsage
    exit 2
fi

logMsg 7 "Detecting currently active PHP versions (fpm & command line)"

# Use PHP to determine the current PHP version
CURRENT_CMDLINE_VERSION=$(php -r "error_reporting(0); echo substr(phpversion(), 0, 3);")

# Find the list of active PHP FPM services running
CURRENT_FPM_VERSIONS=$(launchctl list | grep -oE "php(@[0-9]+(.[0-9]+)?)?" | awk "{gsub(/php$/,\"php@$PHP_LATEST_STANDARD_VERSION\")}1" | sort -r)
CURRENT_FPM_VERSIONS_FLAT=
if [ ! -z "$CURRENT_FPM_VERSIONS" ];then
    CURRENT_FPM_VERSIONS=${CURRENT_FPM_VERSIONS//php@/""}

    for phpActiveServiceVersion in ${CURRENT_FPM_VERSIONS//\\n/ }
    do
        if [ "$phpActiveServiceVersion" == "$PHP_LATEST_STANDARD_VERSION" ]; then
            if [ ! -z "$CURRENT_FPM_VERSIONS_FLAT" ]; then
                CURRENT_FPM_VERSIONS_FLAT="$CURRENT_FPM_VERSIONS_FLAT php"
            else
                CURRENT_FPM_VERSIONS_FLAT="php"
            fi
        else
            if [ ! -z "$CURRENT_FPM_VERSIONS_FLAT" ]; then
                CURRENT_FPM_VERSIONS_FLAT="$CURRENT_FPM_VERSIONS_FLAT php@$phpActiveServiceVersion"
            else
                CURRENT_FPM_VERSIONS_FLAT="php@$phpActiveServiceVersion"
            fi
        fi
    done
fi

if [ -z "$CURRENT_CMDLINE_VERSION" ]; then
    echo "We had trouble detecting the current command line version of PHP, exiting:" 1>&2
    echo "  Command line version: N/A" 1>&2
    if [ -z "$CURRENT_FPM_VERSIONS" ]; then
        echo "   FPM services active: N/A" 1>&2
    else
        echo "   FPM services active: $CURRENT_FPM_VERSIONS_FLAT" 1>&2
    fi
    exit 1
fi

if [ "$CURRENT_CMDLINE_VERSION" != "$CURRENT_FPM_VERSIONS" ];then
    if [ ! -z "$CURRENT_FPM_VERSIONS" ]; then
        logMsg 5 "Command line & FPM versions are out of sync: $CURRENT_CMDLINE_VERSION vs PHP-FPM Services active: $CURRENT_FPM_VERSIONS_FLAT respectively"
    else
        logMsg 5 "Command line & FPM versions are out of sync: $CURRENT_CMDLINE_VERSION vs PHP-FPM Services active: N/A respectively"
    fi
else
    logMsg 7 "Command line and FPM versions are equal"
fi

phpMajMinVersionParse $CURRENT_CMDLINE_VERSION CURRENT_CMDLINE_MAJOR CURRENT_CMDLINE_MINOR

if [ -z "$CURRENT_CMDLINE_MAJOR" ] || [ -z "$CURRENT_CMDLINE_MINOR" ]; then
    echo "PHP command line version syntax not recognised!" 1>&2
    echo
    showUsage
    exit 2
fi

logMsg 6 "Found PHP versions:"
logMsg 6 "  Command line version: $CURRENT_CMDLINE_VERSION"
if [ -z "$CURRENT_FPM_VERSIONS" ]; then
    logMsg 6 "   FPM services active: N/A"
else
    logMsg 6 "   FPM services active: $CURRENT_FPM_VERSIONS_FLAT"
fi

if [ "$CURRENT_CMDLINE_VERSION" = "$TARGET_PHP_VERSION" ] && [ "$CURRENT_FPM_VERSIONS" = "$TARGET_PHP_VERSION" ];then
    echo "Detected that target version is already active."
    echo
    while true; do
        read -r -p "Continue anyway? (y/n) " yn
        case $yn in
            [Yy]* ) echo && break;;
            [Nn]* ) echo && exit 0;;
        esac
    done
fi

if [ ! -z "$CURRENT_FPM_VERSIONS" ];then
    logMsg 6 "Stopping current PHP FPM services..."
    for phpServiceVersion in ${CURRENT_FPM_VERSIONS//\\n/ }
    do
        if [ "$phpServiceVersion" == "$PHP_LATEST_STANDARD_VERSION" ]; then
            if [ $DO_DRY_RUN -eq 1 ];then
                echo "brew services stop \"php\""
            else
                if ! brew services stop "php" >/dev/null 2>&1; then
                    logMsg 4 "Failed to stop service php"
                else
                    logMsg 6 "Successfully stopped service php"
                fi
            fi
        else
            if [ $DO_DRY_RUN -eq 1 ];then
                echo "brew services stop \"php@$phpServiceVersion\""
            else
                if ! brew services stop "php@$phpServiceVersion" >/dev/null 2>&1; then
                    logMsg 4 "Failed to stop service php@$phpServiceVersion"
                else
                    logMsg 6 "Successfully stopped service php@$phpServiceVersion"
                fi
            fi
        fi
    done
fi

declare -a CURRENT_PHP_PACKAGES
declare -a TARGET_PHP_PACKAGES
if [ "$CURRENT_CMDLINE_VERSION" == "$PHP_LATEST_STANDARD_VERSION" ]; then
    CURRENT_PHP_PACKAGES=($(brew list | grep -E "php[^@]*$"))
else
    CURRENT_PHP_PACKAGES=($(brew list | grep "php@$CURRENT_CMDLINE_VERSION"))
fi

if [ "$TARGET_PHP_VERSION" == "$PHP_LATEST_STANDARD_VERSION" ]; then
    TARGET_PHP_PACKAGES=($(brew list | grep -E "php[^@]*$"))
else
    TARGET_PHP_PACKAGES=($(brew list | grep "php@$TARGET_PHP_VERSION"))
fi

packages_to_unlink=$(IFS=' '; echo "${CURRENT_PHP_PACKAGES[*]}")
packages_to_link=$(IFS=' '; echo "${TARGET_PHP_PACKAGES[*]}")

if [ $DO_DRY_RUN -eq 1 ];then
    echo "brew unlink $packages_to_unlink"
    echo "brew link --force --overwrite $packages_to_link"
else
    if ! brew unlink $packages_to_unlink >/dev/null 2>&1; then
        echo "We had trouble unlinking the package set:" 1>&2
        echo "  $packages_to_unlink" 1>&2
        exit 1
    else
        logMsg 6 "Successfully unlinked:"
        logMsg 6 "  $packages_to_unlink"
    fi

    if ! brew link --force --overwrite $packages_to_link >/dev/null 2>&1; then
        echo "We had trouble linking the package set:" 1>&2
        echo "  $packages_to_link" 1>&2
        exit 1
    else
        logMsg 6 "Successfully linked:"
        logMsg 6 "  $packages_to_link"
    fi
fi

logMsg 6 "Starting target PHP FPM service."
if [ "$TARGET_PHP_VERSION" == "$PHP_LATEST_STANDARD_VERSION" ]; then
    if [ $DO_DRY_RUN -eq 1 ];then
        echo "brew services start \"php\""
    else
        if ! brew services start "php" >/dev/null 2>&1; then
            logMsg 4 "Failed to start service php"
        else
            logMsg 6 "Successfully started service php"
        fi
    fi
else
    if [ $DO_DRY_RUN -eq 1 ];then
        echo "brew services start \"php@$TARGET_PHP_VERSION\""
    else
        if ! brew services start "php@$TARGET_PHP_VERSION" >/dev/null 2>&1; then
            logMsg 4 "Failed to start service php@$TARGET_PHP_VERSION"
        else
            logMsg 6 "Successfully started service php@$TARGET_PHP_VERSION"
        fi
    fi
fi

if [ $DO_DRY_RUN -eq 0 ];then
    logMsg 6 "Process complete and PHP FPM and the command line should be running $TARGET_PHP_VERSION"
fi
echo "All Done!"

exit 0
